# Try writing a GitHub Action with Python code inline to check links.

name: "Check for private links"

on:
  pull_request:

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  check-links:
    name: "Check for private links"
    runs-on: ubuntu-latest

    steps:
      #- name: "Dump context"
      #  uses: crazy-max/ghaction-dump-context@v1

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.after }}

      - name: Checkout more
        run: |
          git checkout ${{ github.base_ref }}
          git checkout ${{ github.head_ref }}

      - name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: "Install requirements"
        run: |
          python -m pip install \
            requests==2.28.1 \
            markdown==3.4.1 \
            lxml==4.9.1

      - name: "Create code to run"
        run: |
          cat > check-links.py <<END_OF_PYTHON
          import sys

          import lxml.html
          import markdown

          def stdin_commits():
              commits = sys.stdin.read().split("\0")
              for commit in commits:
                  if commit:
                      meta, message = commit.split("\n\n", maxsplit=1)
                      hash = meta.split("\n", maxsplit=1)[0]
                      yield (hash, message)

          def markdown_urls(text):
              print(f"{text=}")
              md = markdown.markdown(text)
              print(f"{md=}")
              doc = lxml.html.document_fromstring(md)
              for link in doc.xpath('//a'):
                  yield link.get('href')

          def things_to_check():
              yield "PR title", sys.argv[1]
              yield "PR description", sys.argv[2]
              for hash, message in stdin_commits():
                  yield f"commit {hash}", message

          for name, text in things_to_check():
              for url in markdown_urls(text):
                  print(f"{name} has {url}")

          END_OF_PYTHON

      - name: "Run the code"
        env:
          TITLE: ${{ github.event.pull_request.title }}
          DESCRIPTION: ${{ github.event.pull_request.body }}
        run: |
          git rev-list --header ${{ github.base_ref }}..${{ github.head_ref}} | python check-links.py "$TITLE" "$DESCRIPTION"
